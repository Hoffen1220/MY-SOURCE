# -*- coding:utf-8 -*-
# Author: Tianbao

import numpy as np
from functools import reduce


def loadDataSet():
    """
    创建实验样本
    :return: postingList-实验样本切分的词条
             classVec-类别标签向量
    """
    postingList = [['my', 'dog', 'has', 'flea', 'problems', 'help', 'please'],  # 切分的词条
                   ['maybe', 'not', 'take', 'him', 'to', 'dog', 'park', 'stupid'],
                   ['my', 'dalmation', 'is', 'so', 'cute', 'I', 'love', 'him'],
                   ['stop', 'posting', 'stupid', 'worthless', 'garbage'],
                   ['mr', 'licks', 'ate', 'my', 'steak', 'how', 'to', 'stop', 'him'],
                   ['quit', 'buying', 'worthless', 'dog', 'food', 'stupid']]
    classVec = [0, 1, 0, 1, 0, 1]  # 类别标签向量，1代表侮辱性词汇，0代表不是
    return postingList, classVec


def createVocabList(dataSet):
    """
    将切分的实验样本词条整理为不重复的词汇表
    :param dataSet: 整理的样本数据集
    :return: vocabSet-词汇表
    """
    vocabSet = set([])
    for document in dataSet:
        vocabSet = vocabSet | set(document)
    return list(vocabSet)


def setOfWords2Vec(vocabList, inputSet):
    """
    根据vocabList词汇表，将inputSet向量化，向量每个元素为1或0
    :param vocabList:词汇表
    :param inputSet:切分的词条列表
    :return:returnVec-文档向量
    """
    returnVect = [0] * len(vocabList)
    for word in inputSet:
        if word in vocabList:
            returnVect[vocabList.index(word)] = 1
        else:
            print('the word:%s is not in my Vocabulary!' % word)
    return returnVect


def trainNB0(trainMatrix, trainCategory):
    """
    朴素贝叶斯分类器训练
    :param trainMatrix:训练文档矩阵
    :param trainCategory: 训练类别标签向量
    :return: p0Vect-侮辱类条件概率数组
             p1Vect-非侮辱类条件概率数组
             pAbusive-文档属于侮辱类概率
    """
    numTrainDocs = len(trainMatrix)  # 训练的文档数目
    numWords = len(trainMatrix[0])  # 每篇文档词条数
    pAbusive = sum(trainCategory) / float(numTrainDocs)  # 文档属于侮辱类的概率
    p0Num = np.ones(numWords)
    p1Num = np.ones(numWords)  # 词条出现数初始化为1，拉普拉斯平滑
    p0Denom = 2.0
    p1Denom = 2.0  # 分母初始化为2，拉普拉斯平滑
    for i in range(numTrainDocs):
        if trainCategory[i] == 1:
            p1Num += trainMatrix[i]
            p1Denom += sum(trainMatrix[i])  # 统计属于侮辱类的条件概率所需的数据，即P(w0|1),P(w1|1),P(w2|1)···
            # print(p1Num,'\n',p1Denom)
        else:
            p0Num += trainMatrix[i]
            p0Denom += sum(trainMatrix[i])  # 统计属于非侮辱类的条件概率所需的数据，即P(w0|0),P(w1|0),P(w2|0)···
    p1Vect = np.log(p1Num / p1Denom)
    p0Vect = np.log(p0Num / p0Denom)
    return p0Vect, p1Vect, pAbusive


def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):
    """
    朴素贝叶斯分类器分类
    :param vec2Classify: 待分类的词条数组
    :param p0Vec: 非侮辱类条件概率数组
    :param p1Vec: 侮辱类条件概率数组
    :param pClass1: 文档属于侮辱类的概率
    :return: 0-非侮辱类
             1-侮辱类
    """
    # p1 = reduce(lambda x, y: x * y, vec2Classify * p1Vec) * pClass1
    # p0 = reduce(lambda x, y: x * y, vec2Classify * p0Vec) * (1 - pClass1)
    p1 = sum(vec2Classify * p1Vec) + np.log(pClass1)
    p0 = sum(vec2Classify * p0Vec) + np.log(1 - pClass1)
    print('p0:', p0)
    print('p1:', p1)
    if p1 > p0:
        return 1
    else:
        return 0


def testingNB():
    """
    朴素贝叶斯分类器测试
    :return:
    """
    listPosts, listClasses = loadDataSet()
    myVocabList = createVocabList(listPosts)
    trainMat = []
    for postinDoc in listPosts:
        trainMat.append(setOfWords2Vec(myVocabList, postinDoc))
    p0V, p1V, pAb = trainNB0(np.array(trainMat), np.array(listClasses))

    testEntry = ['love', 'my', 'dalmation']
    thisDoc = np.array(setOfWords2Vec(myVocabList, testEntry))
    if classifyNB(thisDoc, p0V, p1V, pAb):
        print(testEntry, '属于侮辱类')  # 执行分类并打印分类结果
    else:
        print(testEntry, '属于非侮辱类')  # 执行分类并打印分类结果

    testEntry = ['stupid', 'garbage']  # 测试样本2
    thisDoc = np.array(setOfWords2Vec(myVocabList, testEntry))  # 测试样本向量化
    if classifyNB(thisDoc, p0V, p1V, pAb):
        print(testEntry, '属于侮辱类')  # 执行分类并打印分类结果
    else:
        print(testEntry, '属于非侮辱类')


if __name__ == '__main__':
    testingNB()
