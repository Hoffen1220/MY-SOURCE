# -*- coding:utf-8 -*-
# Author: Tianbao

import numpy as np
import re  # 正则表达式
import random


def textParse(bigString):
    """
    将大字符串解析为字符串列表
    :param bigString:
    :return:
    """
    listOfTokens = re.split(r'\W+', bigString)  # 将特殊符号作为切分标志进行字符串切分，即非字母、非数字
    return [tok.lower() for tok in listOfTokens if len(tok) > 2]  # 除了单个字母，例如大写的I，其它单词变成小写


def createVocabList(dataSet):
    """
    将切分的实验样本词条整理为不重复的词汇表
    :param dataSet: 整理的样本数据集
    :return: vocabSet-词汇表
    """
    vocabSet = set([])
    for document in dataSet:
        vocabSet = vocabSet | set(document)
    return list(vocabSet)


def setOfWords2Vec(vocabList, inputSet):
    """
    根据vocabList词汇表，将inputSet向量化，向量每个元素为1或0
    :param vocabList:词汇表
    :param inputSet:切分的词条列表
    :return:returnVec-文档向量
    """
    returnVect = [0] * len(vocabList)
    for word in inputSet:
        if word in vocabList:
            returnVect[vocabList.index(word)] = 1
        else:
            print('the word:%s is not in my Vocabulary!' % word)
    return returnVect


def bagOfWords2VecMN(vocabList, inputSet):
    """
    根据词汇表构建词袋模型
    :param vocabList:词汇表
    :param inputSet:切分的词条列表
    :return:returnVec-文档向量，词袋模型
    """
    returnVec = [0] * len(vocabList)  # 创建一个其中所含元素都为0的向量
    for word in inputSet:  # 遍历每个词条
        if word in vocabList:  # 如果词条存在于词汇表中，则计数加一
            returnVec[vocabList.index(word)] += 1
    return returnVec


def trainNB0(trainMatrix, trainCategory):
    """
    朴素贝叶斯分类器训练
    :param trainMatrix:训练文档矩阵
    :param trainCategory: 训练类别标签向量
    :return: p0Vect-侮辱类条件概率数组
             p1Vect-非侮辱类条件概率数组
             pAbusive-文档属于侮辱类概率
    """
    numTrainDocs = len(trainMatrix)  # 训练的文档数目
    numWords = len(trainMatrix[0])  # 每篇文档词条数
    pAbusive = sum(trainCategory) / float(numTrainDocs)  # 文档属于侮辱类的概率
    p0Num = np.ones(numWords)
    p1Num = np.ones(numWords)  # 词条出现数初始化为1，拉普拉斯平滑
    p0Denom = 2.0
    p1Denom = 2.0  # 分母初始化为2，拉普拉斯平滑
    for i in range(numTrainDocs):
        if trainCategory[i] == 1:
            p1Num += trainMatrix[i]
            p1Denom += sum(trainMatrix[i])  # 统计属于侮辱类的条件概率所需的数据，即P(w0|1),P(w1|1),P(w2|1)···
            # print(p1Num,'\n',p1Denom)
        else:
            p0Num += trainMatrix[i]
            p0Denom += sum(trainMatrix[i])  # 统计属于非侮辱类的条件概率所需的数据，即P(w0|0),P(w1|0),P(w2|0)···
    p1Vect = np.log(p1Num / p1Denom)
    p0Vect = np.log(p0Num / p0Denom)
    return p0Vect, p1Vect, pAbusive


def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):
    """
    朴素贝叶斯分类器分类
    :param vec2Classify: 待分类的词条数组
    :param p0Vec: 非侮辱类条件概率数组
    :param p1Vec: 侮辱类条件概率数组
    :param pClass1: 文档属于侮辱类的概率
    :return: 0-非侮辱类
             1-侮辱类
    """
    # p1 = reduce(lambda x, y: x * y, vec2Classify * p1Vec) * pClass1
    # p0 = reduce(lambda x, y: x * y, vec2Classify * p0Vec) * (1 - pClass1)
    p1 = sum(vec2Classify * p1Vec) + np.log(pClass1)
    p0 = sum(vec2Classify * p0Vec) + np.log(1 - pClass1)
    # print('p0:', p0)
    # print('p1:', p1)
    if p1 > p0:
        return 1
    else:
        return 0


def spamTest():
    docList = []
    classList = []
    fullText = []
    for i in range(1, 26):
        wordList = textParse(open('spam/%d.txt' % i, 'r').read())  # 读取每个垃圾邮件，并转换为字符串列表
        docList.append(wordList)
        fullText.append(wordList)
        classList.append(1)
        wordList = textParse(open('ham//%d.txt' % i, 'r').read())  # 读取每个非垃圾邮件，并转换为字符串列表
        docList.append(wordList)
        fullText.append(wordList)
        classList.append(0)
    vocabList = createVocabList(docList)
    trainingSet = list(range(50))
    testSet = []
    for i in range(10):
        randIndex = int(random.uniform(0, len(trainingSet)))
        testSet.append(trainingSet[randIndex])
        del (trainingSet[randIndex])
    trainMat = []
    trainClasses = []
    for docIndex in trainingSet:
        trainMat.append(setOfWords2Vec(vocabList, docList[docIndex]))
        trainClasses.append(classList[docIndex])
    p0V, p1V, pSpam = trainNB0(np.array(trainMat), np.array(trainClasses))
    errorCount = 0
    for docIndex in testSet:
        wordVector = setOfWords2Vec(vocabList, docList[docIndex])
        if classifyNB(np.array(wordVector), p0V, p1V, pSpam) != classList[docIndex]:
            errorCount += 1
            print("分类错误的测试集：", docList[docIndex])
    print('错误率：%.2f%%' % (float(errorCount) / len(testSet) * 100))
    return float(errorCount) / len(testSet) * 100


if __name__ == '__main__':
    errorRate = []
    for i in range(10):
        errorRate.append(spamTest())
    print(str(sum(error for error in errorRate) / 10)+'%')
